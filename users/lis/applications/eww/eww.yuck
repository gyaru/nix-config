(deflisten workspaces :initial "[]" "bash ~/.config/eww/get-workspaces")
(deflisten current_workspace :initial "" "bash ~/.config/eww/get-active-workspace")
(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")
(defpoll volume :interval "1s"
  "scripts/getvol")
(defpoll time :interval "10s"
  "date '+%H:%M'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :exclusive true
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "3411px"
                      :height "35px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "15px")
  (bar :screen 0))

(defwidget bar []
  (box :class "bar_class"
       :orientation "h"
       :valign "center"
  (left)
  (center)
  (right)
    ))

(defwidget left []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "start"
		 :class "left_modules"
(media)))


(defwidget media []
  (box :class "media"
       :orientation "h"
       :space-evenly false
       :halign "start"
    {music != "" ? " ${music}" : ""}))

(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
(workspaces)))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "center"
       :spacing 10
  (label :text "${workspaces}${current_workspace}" :visible false)
  (for workspace in workspaces
      (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
        (label :text "${workspace.windows > 0 ? "${workspace.id == current_workspace ? "" : ""}" : "${workspace.id == current_workspace ? "" : ""}"}")
        )
    )
  )
)

(defwidget right []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "end"
		 :class "right_modules"
(time)))

(defwidget time []
  (box :class "time"
       :orientation "h"
       :space-evenly false
       :halign "end"
    {"${time}"}))

(defwidget sidepanel []
  (box :class "sidepanel" :orientation "h" :space-evenly false :halign "end"
    time))

